+ The learning stuff is gonna start with the one of the most and required application

+ This is the only way to create the Login application.

+ The purpose of this application is creating an app with Login/Logout functionality.

+ The application is created using the classic toolkit in ExtJS 6.

+ As the focus is specifically on the Classic toolkit, so avoided using the Modern or Universal toolkit (providing both the Classic and Modern toolkit).

+ The app is ment to design an implementation containing 'Logged in' and 'Logged out' view.

+ This application does not attempt to achieve secure data connection, session management, true authentication, etc.


			-- ** GENERATING THE APPLICATION ** --
sencha -skd {path/to/ExtJS_6.2.0_SDK} generate app -classic {application_name} {absolute or relative path of the application}

     << Just replace '-classic' by '-modern' for building app using Modern toolkit >>
     << Specify neither '-classic' nor '-modern' for building app using Universal toolkit >>



			-- ** RUNNING THE APPLICATION ** --
The application can be executed using the console command 'sencha app watch' in the root directory of the application.

Checkout the socket address of the application from the console and navigate to it in the browser to see the application running.



+ New folder 'login' was created in the 'view' folder for the View Component Login. This view folder has the View Component module Login.js and View Controller LoginController.js

+ The default View class instantiation was commented for the user to first show a view to login as the user won't be logged in initially when the app is executed.

+ A window is created to create the login form in Login.js

+ Worked on the Login View Component and it's ecosystem such as it's View Controller LoginController.js simulataneously as required.

+ The 'launch' life-cycle function of the application in 'Application.js' is implemented to decide the first view to be shown to the user once the application is running based on if the user is logged in the application by checking the flag in the browser Local Storage.

+ Plugin viewport is added in the View Component 'Main' with config plugins.

+ Adding the Logout logic inside the Main Component View Controller 'MainController' to remove the user logged in flag from the Local Storage of browser and set the Login Component View for the Viewport of the application.

+ Adding a Logout button inside the header of the View Component 'Main' in Main.js

+ Do not make any typos in the application, becomes very hard to find out as JavaScript does not really help with in-depth or some specific error and simply loads blank screen...too cruel to handle..!